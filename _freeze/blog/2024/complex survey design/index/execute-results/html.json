{
  "hash": "c44e8db35ea40635a3e5aa4c9f4c4620",
  "result": {
    "markdown": "---\ntitle: \"Statistical analysis for weighted data\"\ndate: 2024-01-28\ndescription: \"Step by step guidline for statistical analysis for weighted data\"\nimage: \"img/Nigeria_GWP2021_ncdr_edu_histogram.gif\"\ntwitter-card: \n  image: \"img/Nigeria_GWP2021_ncdr_edu_histogram.gif\"\nopen-graph: \n  image: \"img/Nigeria_GWP2021_ncdr_edu_histogram.gif\"\ncategories: \n  - r\n  - survey\n  - weighted data\n  - statistical analysis\n  - visualization\n  - DQQ\n  - GAIN\n---\n\n\n## Introduction\n\nThis document explains the detailed analysis of **Nigeria DQQ survey data**. Nigeria DQQ survey study was conducted to address some of the gaps in diet quality data in Nigeria, by assessing diet quality at state level using the DQQ. The specific objectives of the study were to: 1. Measure MDD-W, NCDs-Protect, NCDs-Risk, and GDR scores, and All-5 at state level using the DQQ02 and describe state level diet quality. 2. Compare diet quality of men and women and of urban and rural dwellers. 3. Determine food access at state level.\n\n## A quick look into the metadata\n\nLet's jump straight into the analysis workflow for survey data in R environment. We can use functions from R packages `sjPlot`, `surveytoolbox`, and `labelled` to explore and extract information from the SPSS, SAS and STATA data files. Specifically, `view_df` function from `sjPlot` is a quick and efficient way to overview variable ID number, name, label, type and associated value labels.\n\nFirst, we need to load all required libraries into our working environment in R\n\n\n::: {.cell}\n\n````{.cell-code  code-fold=\"true\"}\n```{{r}}\n#| label: Loading required libraries\n#| warning: false\n#| output: false\n#| include: true\n#| code-fold: true\n\n#install.packages(\"sjPlot\")\n#install.packages(\"devtools\")\n#devtools::install_github(\"martinctc/surveytoolbox\")\n\nlibrary(haven)\nlibrary(expss)\nlibrary(tidyverse)\nlibrary(foreign)\nlibrary(survey)\nlibrary(plotrix)\nlibrary(labelled)\nlibrary(surveytoolbox)\nlibrary(sjPlot)\nlibrary(camcorder)\nlibrary(sysfonts)\nlibrary(showtext)\n```\n````\n:::\n\n::: {.cell}\n\n````{.cell-code  code-fold=\"true\"}\n```{{r}}\n#| include: true\n#| output: true\n#| code-fold: true\n#| warning: false\n\nfile_path <- \"input/Nigeria DQQ Survey HH & Indiv Data Merged.dta\"\nd <- read_dta(file_path)\n```\n````\n:::\n\n\nChecking metadata in a clean table for `i4` and `i3` variables.\n\n\n::: {.cell}\n\n````{.cell-code  code-fold=\"true\"}\n```{{r}}\n#| code-fold: true\n#| warning: false\n\nd %>%\n  select(i4, i3) %>%\n  sjPlot::view_df(\n  alternate.rows = T,\n  CSS = list(css.table = \"border: 2px solid;\",\n                   css.tdata = \"border: 1px solid;\",\n                   css.arc = \"color:blue;\"),\n  \n)\n```\n````\n\n::: {.cell-output-display}\n`````{=html}\n<table style=\"border: 2px solid;\">\n<caption>Data frame: .</caption>\n<tr>\n<th style=\"border-bottom:double; font-style:italic; font-weight:normal; padding:0.2cm; text-align:left; vertical-align:top;\">ID</th><th style=\"border-bottom:double; font-style:italic; font-weight:normal; padding:0.2cm; text-align:left; vertical-align:top;\">Name</th><th style=\"border-bottom:double; font-style:italic; font-weight:normal; padding:0.2cm; text-align:left; vertical-align:top;\">Label</th><th style=\"border-bottom:double; font-style:italic; font-weight:normal; padding:0.2cm; text-align:left; vertical-align:top;\">Values</th><th style=\"border-bottom:double; font-style:italic; font-weight:normal; padding:0.2cm; text-align:left; vertical-align:top;\">Value Labels</th>\n</tr>\n<tr>\n<td style=\"border: 1px solid;\">1</td>\n<td style=\"border: 1px solid;\">i4</td>\n<td style=\"border: 1px solid;\">Sector of Main Job</td>\n<td style=\"border: 1px solid;\">1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>12<br>98<br>99</td>\n<td style=\"border: 1px solid;\">Not working and didn't work in last 12 months<br>Professional, Technical and Related Workers<br>Administrative and Managerial Workers<br>Office and Administrative support workers<br>Sales and Related Workers<br>Service Workers<br>Installations, Maintenance and Repair Workers<br>Craft and related trade workers<br>Agricultural, Animal Husbandry, and Forestry Workers, Fishermen and Hunters<br>Production, Construction and Extractions Workers<br>Elementary occupations<br>Others (Specify)<br>Don’t know</td>\n</tr>\n<tr>\n<td style=\"border: 1px solid; color:blue;\">2</td>\n<td style=\"border: 1px solid; color:blue;\">i3</td>\n<td style=\"border: 1px solid; color:blue;\">Highest Level of school completed</td>\n<td style=\"border: 1px solid; color:blue;\">1<br>2<br>3<br>4<br>5<br>98<br>99</td>\n<td style=\"border: 1px solid; color:blue;\">None<br>Primary<br>Junior Secondary School<br>Senior Secondary School<br>Higher / university/ college<br>Others (Specify)<br>DON’T KNOW</td>\n</tr>\n\n</table>\n`````\n:::\n:::\n\n\n## Data cleaning and preparation\n\nThe first data cleaning step is to change some names in DQQ variables and make them easier to use for further analysis. Arbitrary function `varname` is created to manipulate only main DQQ variables' names.\n\n\n::: {.cell}\n\n````{.cell-code  code-fold=\"true\"}\n```{{r}}\n#| output: true\n#| code-fold: true\n#| warning: false\n\nvarname <- function(txt) {\n  ifelse(\n   txt %in% c(\"DQQ_06_1_Green_leafy_vegetables\", \n              \"DQQ_06_2_Green_leafy_vegetables\", \n              \"DQQ_10_1_Other_fruits\",\n              \"DQQ_10_2_Other_fruits\"),\n    gsub(\"^(.*)(.)$\", \"\\\\1_\\\\2\", gsub(\"_\", \"\", substr(txt, 1, 8))),\n    gsub(\"_\", \"\", substr(txt, 1, 6))\n  )\n}\n\nd %<>%\n  rename_with(.fn = varname, .cols = starts_with(\"DQQ_\", ignore.case = FALSE))\n```\n````\n:::\n\n\nCheck first five rows for first 5 DQQ values only.\n\n\n::: {.cell}\n\n````{.cell-code  code-fold=\"true\"}\n```{{r}}\n#| code-fold: true\n#| warning: false\n\nd %>%\n  select(DQQ01:DQQ05) %>%\n  head()\n```\n````\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 5\n  DQQ01 DQQ02 DQQ03 DQQ04 DQQ05\n  <dbl> <dbl> <dbl> <dbl> <dbl>\n1     1     0     0     1     0\n2     1     1     1     1     0\n3     1     0     0     1     0\n4     1     1     1     1     0\n5     1     0     0     0     0\n6     1     0     1     1     0\n```\n:::\n:::\n\n\n## Main calculation code blocks for food groups\n\nTwo core R functions are employed for calculation of food groups. These are `case_when` function from `dplyr` to distinguishes between **yes** and **no** answers, and `ifelse` base R for cases when a cumulative score should be evaluated against a threshold (For instance, for *MDD-W* and its threshold on *DDS = 5*)\n\n\n::: {.cell}\n\n````{.cell-code  code-fold=\"true\"}\n```{{r}}\n#| output: true\n#| code-fold: true\n#| warning: false\n\n# DDS\nd %<>% \n  mutate(\n    dds = \n      case_when(DQQ01 == 0 & DQQ02 == 0 & DQQ03 == 0 ~ 0L, DQQ01 == 1 | DQQ02 == 1 | DQQ03 == 1 ~ 1L, TRUE ~ NA) + \n      case_when(DQQ04 == 0 ~ 0L, DQQ04 == 1 ~ 1L, TRUE ~ NA) + \n      case_when(DQQ21 == 0 ~ 0L, DQQ21 == 1 ~ 1L, TRUE ~ NA) + \n      case_when(DQQ14 == 0 & DQQ15 == 0 & DQQ25 == 0 ~ 0L, DQQ14 == 1 | DQQ15 == 1 | DQQ25 == 1 ~ 1L, TRUE ~ NA) + \n      case_when(DQQ16 == 0 & DQQ17 == 0 & DQQ18 == 0 & DQQ19 == 0 & DQQ20 == 0 ~ 0L, DQQ16 == 1 | DQQ17 == 1 | \n                  DQQ18 == 1 | DQQ19 == 1 | DQQ20 == 1 ~ 1L, TRUE ~ NA) + \n      case_when(DQQ13 == 0 ~ 0L, DQQ13 == 1 ~ 1L, TRUE ~ NA) + \n      case_when(DQQ06_1 == 0 & DQQ06_2 == 0 ~ 0L, DQQ06_1 == 1 | DQQ06_2 == 1 ~ 1L, TRUE ~ NA) + \n      case_when(DQQ05 == 0 & DQQ08 == 0 ~ 0L, DQQ05 == 1 | DQQ08 == 1 ~ 1L, TRUE ~ NA) + \n      case_when(DQQ07 == 0 ~ 0L, DQQ07 == 1 ~ 1L, TRUE ~ NA) + \n      case_when(DQQ09 == 0 & DQQ10_1 == 0 & DQQ10_2 == 0 ~ 0L, DQQ09 == 1 | DQQ10_1 == 1 | DQQ10_2 == 1 ~ 1L, TRUE ~ NA)\n  )\n\n#MDD-W \nd$mddw <- ifelse((case_when(d$DQQ01 == 0 & d$DQQ02 == 0 & d$DQQ03 == 0 ~ 0L, d$DQQ01 == 1 | \n                              d$DQQ02 == 1 | d$DQQ03 == 1 ~ 1L, TRUE ~ NA) + \n                    case_when(d$DQQ04 == 0 ~ 0L, d$DQQ04 == 1 ~ 1L, TRUE ~ NA) + \n                    case_when(d$DQQ21 == 0 ~ 0L, d$DQQ21 == 1 ~ 1L, TRUE ~ NA) + \n                    case_when(d$DQQ14 == 0 & d$DQQ15 == 0 & d$DQQ25 == 0 ~ 0L, d$DQQ14 == 1 | d$DQQ15 == 1 | \n                                d$DQQ25 == 1 ~ 1L, TRUE ~ NA) + \n                    case_when(d$DQQ16 == 0 & d$DQQ17 == 0 & d$DQQ18 == 0 & d$DQQ19 == 0 & d$DQQ20 == 0 ~ 0L, \n                              d$DQQ16 == 1 | d$DQQ17 == 1 | d$DQQ18 == 1 | d$DQQ19 == 1 | d$DQQ20 == 1 ~ 1L, TRUE ~ NA) + \n                    case_when(d$DQQ13 == 0 ~ 0L, d$DQQ13 == 1 ~ 1L, TRUE ~ NA) + \n                    case_when(d$DQQ06_1 == 0 & d$DQQ06_2 == 0 ~ 0L, d$DQQ06_1 == 1 | d$DQQ06_2 == 1 ~ 1L, TRUE ~ NA) + \n                    case_when(d$DQQ05 == 0 & d$DQQ08 == 0 ~ 0L, d$DQQ05 == 1 | d$DQQ08 == 1 ~ 1L, TRUE ~ NA) + \n                    case_when(d$DQQ07 == 0 ~ 0L, d$DQQ07 == 1 ~ 1L, TRUE ~ NA) + \n                    case_when(d$DQQ09 == 0 & d$DQQ10_1 == 0 & d$DQQ10_2 == 0 ~ 0L, d$DQQ09 == 1 | d$DQQ10_1 == 1 | \n                                d$DQQ10_2 == 1 ~ 1L, TRUE ~ NA)) >= 5 & d$gender == 0 &  d$hr5 >= 15 & d$hr5 <= 49, 1, \n                 \n                 ifelse((case_when(d$DQQ01 == 0 & d$DQQ02 == 0 & d$DQQ03 == 0 ~ 0L, d$DQQ01 == 1 | d$DQQ02 == 1 | \n                                     d$DQQ03 == 1 ~ 1L, TRUE ~ NA) + \n                           case_when(d$DQQ04 == 0 ~ 0L, d$DQQ04 == 1 ~ 1L, TRUE ~ NA) + \n                           case_when(d$DQQ21 == 0 ~ 0L, d$DQQ21 == 1 ~ 1L, TRUE ~ NA) + \n                           case_when(d$DQQ14 == 0 & d$DQQ15 == 0 & d$DQQ25 == 0 ~ 0L, d$DQQ14 == 1 | d$DQQ15 == 1 | \n                                       d$DQQ25 == 1 ~ 1L, TRUE ~ NA) + \n                           case_when(d$DQQ16 == 0 & d$DQQ17 == 0 & d$DQQ18 == 0 & d$DQQ19 == 0 & d$DQQ20 == 0 ~ 0L, \n                                     d$DQQ16 == 1 | d$DQQ17 == 1 | d$DQQ18 == 1 | d$DQQ19 == 1 | d$DQQ20 == 1 ~ 1L, TRUE ~ NA) + \n                           case_when(d$DQQ13 == 0 ~ 0L, d$DQQ13 == 1 ~ 1L, TRUE ~ NA) + \n                           case_when(d$DQQ06_1 == 0 & d$DQQ06_2 == 0 ~ 0L, d$DQQ06_1 == 1 | d$DQQ06_2 == 1 ~ 1L, TRUE ~ NA) + \n                           case_when(d$DQQ05 == 0 & d$DQQ08 == 0 ~ 0L, d$DQQ05 == 1 | d$DQQ08 == 1 ~ 1L, TRUE ~ NA) + \n                           case_when(d$DQQ07 == 0 ~ 0L, d$DQQ07 == 1 ~ 1L, TRUE ~ NA) + \n                           case_when(d$DQQ09 == 0 & d$DQQ10_1 == 0 & d$DQQ10_2 == 0 ~ 0L, d$DQQ09 == 1 | d$DQQ10_1 == 1 | \n                                       d$DQQ10_2 == 1 ~ 1L, TRUE ~ NA)) < 5 & d$gender == 0 &  d$hr5 >= 15 & d$hr5 <= 49, 0, NA)) \n\n#All-5  ----\nd$all5 <- ifelse((\n  case_when(d$DQQ01 == 0 & d$DQQ02 == 0 & d$DQQ03 == 0 ~ 0L, d$DQQ01 == 1 | \n              d$DQQ02 == 1 | d$DQQ03 == 1 ~ 1L, TRUE ~ NA) +\n    case_when(d$DQQ05 == 0 & d$DQQ06_1 == 0 & d$DQQ06_2 == 0 & d$DQQ07 == 0 ~ 0L, \n              d$DQQ05 == 1 | d$DQQ06_1 == 1 | d$DQQ06_2 == 1 | d$DQQ07 == 1 ~ 1L, TRUE ~ NA) + \n    case_when(d$DQQ08 == 0 & d$DQQ09 == 0 & d$DQQ10_1 == 0 & d$DQQ10_2 == 0 ~ 0L, \n              d$DQQ08 == 1 | d$DQQ09 == 1 | d$DQQ10_1 == 1 | d$DQQ10_2 == 1 ~ 1L, TRUE ~ NA) + \n    case_when(d$DQQ04 == 0 & d$DQQ21 == 0 ~ 0L, d$DQQ04 == 1 | d$DQQ21 == 1 ~ 1L, TRUE ~ NA) +\n    case_when(d$DQQ13 == 0 & d$DQQ14 == 0 & d$DQQ15 == 0 & d$DQQ16 == 0 & d$DQQ17 == 0 & \n                d$DQQ18 == 0 & d$DQQ19 == 0 & d$DQQ20 == 0 & d$DQQ25 == 0 ~ 0L, \n              d$DQQ13 == 1 | d$DQQ14 == 1 | d$DQQ15 == 1 | d$DQQ16 == 1 | d$DQQ17 == 1 | \n                d$DQQ18 == 1 | d$DQQ19 == 1 | d$DQQ20 == 1 | d$DQQ25 == 1 ~ 1L, TRUE ~ NA)) == 5, 1, 0)\n\n#At least one vegetable  ----\nd %<>% mutate(\n  all5a = case_when(DQQ05 == 0 & DQQ06_1 == 0 & DQQ06_2 == 0 & DQQ07 == 0 ~ 0L, \n                    DQQ05 == 1 | DQQ06_1 == 1 | DQQ06_2 == 1 | DQQ07 == 1 ~ 1L, TRUE ~ NA)\n)\n\n#At least one fruit  ----\nd %<>% mutate(\n  all5b = case_when(DQQ08 == 0 & DQQ09 == 0 & DQQ10_1 == 0 & DQQ10_2 == 0 ~ 0L, \n                    DQQ08 == 1 | DQQ09 == 1 | DQQ10_1 == 1 | DQQ10_2 == 1 ~ 1L, TRUE ~ NA)\n)\n\n#At least one pulse, nut or seed  ----\nd %<>% mutate(\n  all5c = case_when(DQQ04 == 0 & DQQ21 == 0 ~ 0L, DQQ04 == 1 | DQQ21 == 1 ~ 1L, TRUE ~ NA)\n)\n\n#At least one animal-source food (ASF)  ----\nd %<>% mutate(\n  all5d = case_when(DQQ13 == 0 & DQQ14 == 0 & DQQ15 == 0 & DQQ16 == 0 & DQQ17 == 0 & \n                      DQQ18 == 0 & DQQ19 == 0 & DQQ20 == 0 & DQQ25 == 0 ~ 0L, \n                    DQQ13 == 1 | DQQ14 == 1 | DQQ15 == 1 | DQQ16 == 1 | DQQ17 == 1 | \n                      DQQ18 == 1 | DQQ19 == 1 | DQQ20 == 1 | DQQ25 == 1 ~ 1L, TRUE ~ NA)\n)\n\n#At least starchy staple  ----\nd %<>% mutate(\n  all5e = case_when(DQQ01 == 0 & DQQ02 == 0 & DQQ03 == 0 ~ 0L, DQQ01 == 1 \n                    | DQQ02 == 1 | DQQ03 == 1 ~ 1L, TRUE ~ NA)\n)\n\n#NCD-Protect score  ----\nd %<>%\n  mutate(\n    ncdp = \n      case_when(DQQ02 == 0 ~ 0L, DQQ02 == 1 ~ 1L, TRUE ~ NA) + \n      case_when(DQQ04 == 0 ~ 0L, DQQ04 == 1 ~ 1L, TRUE ~ NA) + \n      case_when(DQQ21 == 0 ~ 0L, DQQ21 == 1 ~ 1L, TRUE ~ NA) + \n      case_when(DQQ05 == 0 ~ 0L, DQQ05 == 1 ~ 1L, TRUE ~ NA) + \n      case_when(DQQ06_1 == 0 & DQQ06_2 == 0 ~ 0L, DQQ06_1 == 1 | \n                  DQQ06_2 == 1 ~ 1L, TRUE ~ NA) + \n      case_when(DQQ07 == 0 ~ 0L, DQQ07 == 1 ~ 1L, TRUE ~ NA) + \n      case_when(DQQ08 == 0 ~ 0L, DQQ08 == 1 ~ 1L, TRUE ~ NA) + \n      case_when(DQQ09 == 0 ~ 0L, DQQ09 == 1 ~ 1L, TRUE ~ NA) + \n      case_when(DQQ10_1 == 0 & DQQ10_2 == 0 ~ 0L, DQQ10_1 == 1 |\n                  DQQ10_2 == 1 ~ 1L, TRUE ~ NA)\n  )\n\n#NCD-Risk score  ----\nd %<>%\n  mutate(\n    ncdr = \n      case_when(DQQ28 == 0 ~ 0L, DQQ28 == 1 ~ 1L, TRUE ~ NA) + \n      case_when(DQQ11 == 0 ~ 0L, DQQ11 == 1 ~ 1L, TRUE ~ NA) + \n      case_when(DQQ12 == 0 ~ 0L, DQQ12 == 1 ~ 1L, TRUE ~ NA) + \n      case_when(DQQ16 == 0 ~ 0L, DQQ16 == 1 ~ 1L, TRUE ~ NA) + \n      case_when(DQQ16 == 0 ~ 0L, DQQ16 == 1 ~ 1L, TRUE ~ NA) + \n      case_when(DQQ17 == 0 & DQQ18 == 0 ~ 0L, DQQ17 == 1 | \n                  DQQ18 == 1 ~ 1L, TRUE ~ NA) + \n      case_when(DQQ24 == 0 ~ 0L, DQQ24 == 1 ~ 1L, TRUE ~ NA) + \n      case_when(DQQ23 == 0 & DQQ29 == 0 ~ 0L, DQQ23 == 1 | \n                  DQQ29 == 1 ~ 1L, TRUE ~ NA) + \n      case_when(DQQ22 == 0 ~ 0L, DQQ22 == 1 ~ 1L, TRUE ~ NA) \n  )\n\n#GDR score  ----\nd %<>%\n  mutate(\n    gdr = \n      case_when(DQQ02 == 0 ~ 0L, DQQ02 == 1 ~ 1L, TRUE ~ NA) + \n      case_when(DQQ04 == 0 ~ 0L, DQQ04 == 1 ~ 1L, TRUE ~ NA) + \n      case_when(DQQ21 == 0 ~ 0L, DQQ21 == 1 ~ 1L, TRUE ~ NA) + \n      case_when(DQQ05 == 0 ~ 0L, DQQ05 == 1 ~ 1L, TRUE ~ NA) + \n      case_when(DQQ06_1 == 0 & DQQ06_2 == 0 ~ 0L, DQQ06_1 == 1 | \n                  DQQ06_2 == 1 ~ 1L, TRUE ~ NA) + \n      case_when(DQQ07 == 0 ~ 0L, DQQ07 == 1 ~ 1L, TRUE ~ NA) + \n      case_when(DQQ08 == 0 ~ 0L, DQQ08 == 1 ~ 1L, TRUE ~ NA) + \n      case_when(DQQ09 == 0 ~ 0L, DQQ09 == 1 ~ 1L, TRUE ~ NA) + \n      case_when(DQQ10_1 == 0 & DQQ10_2 == 0 ~ 0L, DQQ10_1 == 1 | \n                  DQQ10_2 == 1 ~ 1L, TRUE ~ NA) -\n      case_when(DQQ28 == 0 ~ 0L, DQQ28 == 1 ~ 1L, TRUE ~ NA) - \n      case_when(DQQ11 == 0 ~ 0L, DQQ11 == 1 ~ 1L, TRUE ~ NA) - \n      case_when(DQQ12 == 0 ~ 0L, DQQ12 == 1 ~ 1L, TRUE ~ NA) - \n      case_when(DQQ16 == 0 ~ 0L, DQQ16 == 1 ~ 1L, TRUE ~ NA) - \n      case_when(DQQ16 == 0 ~ 0L, DQQ16 == 1 ~ 1L, TRUE ~ NA) - \n      case_when(DQQ17 == 0 & DQQ18 == 0 ~ 0L, DQQ17 == 1 | \n                  DQQ18 == 1 ~ 1L, TRUE ~ NA) - \n      case_when(DQQ24 == 0 ~ 0L, DQQ24 == 1 ~ 1L, TRUE ~ NA) - \n      case_when(DQQ23 == 0 & DQQ29 == 0 ~ 0L, DQQ23 == 1 | \n                  DQQ29 == 1 ~ 1L, TRUE ~ NA) - \n      case_when(DQQ22 == 0 ~ 0L, DQQ22 == 1 ~ 1L, TRUE ~ NA) + \n      9\n  )\n\n#DQQ score  ----\n  #Not applicable for this stage\n\n#Zero vegetable or fruit   ----\nd %<>% mutate(\n  zvegfr = case_when(DQQ05 == 0 & DQQ06_1 == 0 & DQQ06_2 == 0 \n                     & DQQ07 == 0 | DQQ08 == 0 & DQQ09 == 0 & DQQ10_1 == 0 & DQQ10_2 == 0 ~ 1L, \n                     DQQ05 == 1 | DQQ06_1 == 1 | DQQ06_2 == 1 | \n                       DQQ07 == 1 | DQQ08 == 1 | DQQ09 == 1 | DQQ10_1 == 1 | DQQ10_2 == 1 ~ 0L, TRUE ~ NA)\n)\n\n#ASF consumption ----\nd %<>% mutate(\n  asf = case_when(DQQ13 == 0 & DQQ14 == 0 & DQQ15 == 0 & DQQ17 == 0 & \n                    DQQ18 == 0 & DQQ19 == 0 & DQQ20 == 0 & DQQ25 == 0 ~ 0L, \n                  DQQ13 == 1 | DQQ14 == 1 | DQQ15 == 1 | DQQ17 == 1 | \n                    DQQ18 == 1 | DQQ19 == 1 | DQQ20 == 1 | DQQ25 == 1 ~ 1L, TRUE ~ NA)\n)\n\n#Sweet beverage ----\nd %<>% mutate(\n  swtbev = case_when(DQQ26 == 0 & DQQ27 == 0 & DQQ28 == 0 ~ 0L, \n                     DQQ26 == 1 | DQQ27 == 1 | DQQ28 == 1 ~ 1L, TRUE ~ NA)\n)\n\n#Soft drink consumption  ----\nd %<>% mutate(\n  sofdr = case_when(DQQ28 == 0 ~ 0L, DQQ28 == 1 ~ 1L, TRUE ~ NA)\n)\n\n#Sweet foods consumption   ----\nd %<>% mutate(\n  swtfd = case_when(DQQ11 == 0 & DQQ12 == 0 ~ 0L, \n                    DQQ11 == 1 | DQQ12 == 1 ~ 1L, TRUE ~ NA) \n)\n\n#Salty or fried snack consumption   ----\nd %<>% mutate(\n  safd = case_when(DQQ22 == 0 & DQQ23 == 0 & DQQ24 == 0 ~ 0L, \n                   DQQ22 == 1 | DQQ23 == 1 | DQQ24 == 1 ~ 1L, TRUE ~ NA)\n)\n\n#Whole grain consumption   ----\nd %<>% mutate(\n  wgrn = case_when(DQQ02 == 0 ~ 0L, DQQ02 == 1 ~ 1L, TRUE ~ NA)\n)\n\n#Pulse consumption   ----\nd %<>% mutate(\n  pls = case_when(DQQ04 == 0 ~ 0L, DQQ04 == 1 ~ 1L, TRUE ~ NA)\n)\n\n#Nuts and seeds consumption   ----\nd %<>% mutate(\n  nut = case_when(DQQ21 == 0 ~ 0L, DQQ21 == 1 ~ 1L, TRUE ~ NA)\n)\n\n#Processed meat consumption   ----\nd %<>% mutate(\n  pmeat = case_when(DQQ16 == 0 ~ 0L, DQQ16 == 1 ~ 1L, TRUE ~ NA)\n)\n\n#Percent consuming each food group   ----\n#a. at least one vegetable or fruit   ----\nd %<>% mutate(\n  vegfr = case_when(DQQ05 == 0 & DQQ06_1 == 0 & DQQ06_2 == 0 & \n                      DQQ07 == 0 & DQQ08 == 0 & DQQ09 == 0 & DQQ10_1 == 0 & DQQ10_2 == 0 ~ 0L, \n                    DQQ05 == 1 | DQQ06_1 == 1 | DQQ06_2 == 1 | \n                      DQQ07 == 1 | DQQ08 == 1 | DQQ09 == 1 | DQQ10_1 == 1 | DQQ10_2 == 1 ~ 1L, TRUE ~ NA)\n)\n\n#b. Salty snacks, instant noodles, or fast food  ----\nd %<>% mutate(\n  snf = case_when(DQQ22 == 0 & DQQ23 == 0 & DQQ29 == 0 ~ 0L, \n                  DQQ22 == 1 | DQQ23 == 1 | DQQ29 == 1 ~ 1L, TRUE ~ NA)\n)\n\n#ome complementary indicators ----\n#Dairy ----\nd %<>% mutate(\n  dairy = case_when(DQQ14 == 0 & DQQ15 == 0 & DQQ25 == 0 ~ 0L, \n                    DQQ14 == 1 | DQQ15 == 1 | DQQ25 == 1 ~ 1L, TRUE ~ NA)\n)\n\n#Dark green leafy vegetables ----\nd %<>% mutate(\n  dveg = case_when(DQQ06_1 == 0 & DQQ06_2 == 0 ~ 0L, \n                   DQQ06_1 == 1 | DQQ06_2 == 1 ~ 1L, TRUE ~ NA)\n)\n\n#Meat, poultry, or fish ----\nd %<>% mutate(\n  anml = case_when(DQQ16 == 0 & DQQ17 == 0 & DQQ18 == 0 & \n                     DQQ19 == 0 & DQQ20 == 0 ~ 0L, \n                   DQQ16 == 1 | DQQ17 == 1 | DQQ18 == 1 | \n                     DQQ19 == 1 | DQQ20 == 1 ~ 1L, TRUE ~ NA)\n)\n\n#Other fruits ----\nd %<>% mutate(\n  ofr = case_when(DQQ10_1 == 0 & DQQ10_2 == 0 ~ 0L, \n                  DQQ10_1 == 1 | DQQ10_2 == 1 ~ 1L, TRUE ~ NA) \n)\n\n#Other vegetables ----\nd %<>% mutate(\n  oveg = case_when(DQQ07 == 0 ~ 0L, \n                   DQQ07 == 1 ~ 1L, TRUE ~ NA)\n)\n\n#Salty snacks, instant noodles, or fast food (including deep fried) ----\nd %<>% mutate(\n  snfd = case_when(DQQ22 == 0 & DQQ23 == 0 & DQQ24 == 0 & DQQ29 == 0 ~ 0L, \n                   DQQ22 == 1 | DQQ23 == 1 | DQQ24 == 1 | DQQ29 == 0 ~ 1L, TRUE ~ NA)\n)\n\n#Unprocessed red meat ----\nd %<>% mutate(\n  umeat = case_when(DQQ17 == 0 & DQQ18 == 0 ~ 0L, \n                    DQQ17 == 1 | DQQ18 == 1 ~ 1L, TRUE ~ NA) \n)\n\nd %>%\n  select(dds, mddw, all5, ncdp, ncdr, gdr, sofdr) %>%\n  head()\n```\n````\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 7\n    dds  mddw  all5  ncdp  ncdr   gdr sofdr\n  <int> <dbl> <dbl> <int> <int> <dbl> <int>\n1     8     1     1     5     2    12     0\n2     8     1     1     6     1    14     0\n3     8    NA     1     5     1    13     0\n4     8    NA     1     6     1    14     0\n5     6    NA     0     3     3     9     1\n6     7     1     0     4     5     8     1\n```\n:::\n:::\n\n\nWhen reading a data set using `haven`, variables have labels and other metadata attached as attributes. If a variable contains labelled values it will be imported as a haven_labelled vector, which stores the variable labels in the labels attribute. First use `class` and `head` functions to see value labels and then check for any missing values in `i3` and `i4` which are job and education classification variables.\n\nThan we can use `add_labels` from `sjlabelled` package to replace value labels with shorter ones, and then factorizing and ordering them based on their original order.\n\n\n::: {.cell}\n\n````{.cell-code  code-fold=\"true\"}\n```{{r}}\n#| output: false\n#| code-fold: true\n#| warning: false\n\n# Checking format and value labels\nclass(d$i4)\nhead(d$i4)\n\n# Check for missing values\nd %>% count(i4, is.na(i4)) # job sector \nd %>% count(i3, is.na(i3)) # level of education\n\n# There is an undefined value in education level. \ntable(labelled::to_factor(d$i3))\n\n#Lets call it undefined category for now.\nd$i3 <- sjlabelled::add_labels(d$i3, labels = c(\n  `Junior Secondary` = 3,\n  `Senior Secondary` = 4,\n  `Higher Education` = 5,\n  `Undefined` = 6)\n  )\n\nd$i4 <- sjlabelled::add_labels(\n  d$i4, labels = c(\n  \"Not working\" = 1,\n  \"Professional and Technical\" = 2,\n  \"Administrative and Managerial\" = 3,\n  \"Office and Admin\" = 4,\n  \"Sales\" = 5,\n  \"Service\" = 6,\n  \"Installations and Maintenance\" = 7 ,\n  \"Craft and Trade\" = 8,\n  \"Agriculture and Fishery\" = 9, \n  \"Production and Construction\" = 10,\n  \"Elementary\" = 11,\n  \"Others\" = 12,\n  \"Don’t know\" = 13\n  )\n)\n\n# Convert to factors, using the labels as levels\n# Labels that don’t exist in the data can be dropped from the levels using drop_unused_labels = TRUE.\nd$job <- labelled::to_factor(d$i4, levels = \"labels\", ordered = TRUE, \n                             sort_levels = 'none', decreasing = FALSE, drop_unused_labels = TRUE)\nd$edu <- labelled::to_factor(d$i3, levels = \"labels\", ordered = TRUE, \n                             sort_levels = 'none', decreasing = FALSE, drop_unused_labels = TRUE)\nd$reg <- labelled::to_factor(d$strata, levels = \"labels\", ordered = TRUE, \n                             sort_levels = 'none', decreasing = FALSE, drop_unused_labels = TRUE)\ntable(d$edu)\n\n# Other ways also work\ngender <- fct_collapse(as.factor(d$gender), \"Male\" = \"1\", \"Female\" = \"0\")\nd$gender <- gender\nd$Residence <- ifelse(d$sector == 1, \"Urban\", ifelse(d$sector == 2, \"Rural\", NA)) \n```\n````\n:::\n\n\n## Complex survey design\n\nHere `survey` R package is used to create complex design objects based on weights provided by GALLUP.\n\n\n::: {.cell}\n\n````{.cell-code  code-fold=\"true\"}\n```{{r}}\n#| warning: false\n#| output: false\n#| code-fold: true\n\noptions(survey.lonely.psu = \"adjust\")\nd <- data.frame(d)\n\nd_m <- d[d$gender == \"Male\", ]\nd_f <- d[d$gender == \"Female\", ]\nd_u <- d[which(d$Residence == \"Urban\"), ]\nd_r <- d[which(d$Residence == \"Rural\"), ]\n\nd_w <- svydesign(ids = ~interview__id, strata = ~strata, nest = FALSE, weights = ~hh_weight, data =  d)\nd_m_w <- svydesign(ids = ~interview__id, strata = ~strata, nest = FALSE, weights = ~hh_weight, data = d_m)\nd_f_w <- svydesign(ids = ~interview__id, strata = ~strata, nest = FALSE, weights = ~hh_weight, data = d_f)\nd_u_w <- svydesign(ids = ~interview__id, strata = ~strata, nest = FALSE, weights = ~hh_weight, data = d_u)\nd_r_w <- svydesign(ids = ~interview__id, strata = ~strata, nest = FALSE, weights = ~hh_weight, data = d_r)\n\nresult1 <- setNames(data.frame(matrix(ncol = 9, nrow = 1)), \n                    c(\"Subgroup\", \"Variable\", \"Mean_prevalence\", \"Lower_95_CI\", \"Upper_95_CI\", \"Difference\", \"Diff_LCI\", \"Diff_UCI\", \"Diff_p\"))\nresult2 <- setNames(data.frame(matrix(ncol = 9, nrow = 1)), \n                    c(\"Subgroup\", \"Variable\", \"Mean_prevalence\", \"Lower_95_CI\", \"Upper_95_CI\", \"Difference\", \"Diff_LCI\", \"Diff_UCI\", \"Diff_p\"))\n\nfor(i in c(\"dds\", \"ncdp\", \"ncdr\", \"gdr\")){\n      x <- svymean(~d[, i], d_w, na.rm = TRUE, method = \"as\", df=degf(d_w))\n      x_LCI <- confint(x)[1]\n      x_UCI <- confint(x)[2]\n      result1 <- rbind(result1, c(\"All\", \n                                  i,\n                                  round(x, digits = 2), \n                                  round(x_LCI, digits = 2), \n                                  round(x_UCI, digits = 2), NA, NA, NA, NA))\n      #  # Male\n      x <- svymean(~d_m[, i],  d_m_w, na.rm = TRUE, method = \"as\", df=degf(d_m_w))\n      x_LCI <- confint(x)[1]\n      x_UCI <- confint(x)[2]\n      varname <- as.name(i)\n      t <- eval(bquote(svyttest(.(varname)~gender, d_w)))\n      result1 <- rbind(result1, c(\"Male\", \n                                  i, \n                                  round(x, digits = 2), \n                                  round(x_LCI, digits = 2), \n                                  round(x_UCI, digits = 2),\n                                  as.numeric(round(t$estimate, digits = 2)), \n                                  as.numeric(round(t$conf.int[1], digits = 2)), \n                                  as.numeric(round(t$conf.int[2], digits = 2)), \n                                  as.numeric(round(t$p.value, digits = 2))))\n      \n      #  # Female\n      x <- svymean(~d_f[, i],  d_f_w, na.rm = TRUE, method = \"as\", df=degf(d_f_w))\n      x_LCI <- confint(x)[1]\n      x_UCI <- confint(x)[2]\n      result1 <- rbind(result1, c(\"Female\", \n                                  i,\n                                  round(x, digits = 2), \n                                  round(x_LCI, digits = 2), \n                                  round(x_UCI, digits = 2),\n                                  as.numeric(round(t$estimate, digits = 2)), \n                                  as.numeric(round(t$conf.int[1], digits = 2)), \n                                  as.numeric(round(t$conf.int[2], digits = 2)), \n                                  as.numeric(round(t$p.value, digits = 2))))\n      \n      #  # Urban\n      x <- svymean(~d_u[, i],  d_u_w, na.rm = TRUE, method = \"as\", df=degf(d_u_w))\n      x_LCI <- confint(x)[1]\n      x_UCI <- confint(x)[2]\n      varname <- as.name(i)\n      t <- eval(bquote(svyttest(.(varname)~Residence, d_w)))\n      result1 <- rbind(result1, c(\"Urban\", \n                                  i,\n                                  round(x, digits = 2), \n                                  round(x_LCI, digits = 2), \n                                  round(x_UCI, digits = 2),\n                                  as.numeric(round(t$estimate, digits = 2)), \n                                  as.numeric(round(t$conf.int[1], digits = 2)), \n                                  as.numeric(round(t$conf.int[2], digits = 2)), \n                                  as.numeric(round(t$p.value, digits = 2))))\n      \n      #  # Rural\n      x <- svymean(~d_r[, i],  d_r_w, na.rm = TRUE, method = \"as\", df=degf(d_r_w))\n      x_LCI <- confint(x)[1]\n      x_UCI <- confint(x)[2]\n      result1 <- rbind(result1, c(\"Rural\", \n                                  i,\n                                  round(x, digits = 2), \n                                  round(x_LCI, digits = 2), \n                                  round(x_UCI, digits = 2),\n                                  as.numeric(round(t$estimate, digits = 2)), \n                                  as.numeric(round(t$conf.int[1], digits = 2)), \n                                  as.numeric(round(t$conf.int[2], digits = 2)), \n                                  as.numeric(round(t$p.value, digits = 2))))\n      \n    }\n\n#prevalence\nfor(i in c(\"all5\", \"all5a\", \"all5b\", \"all5c\", \"all5d\", \"all5e\", \"DQQ11\", \"DQQ14\", \"DQQ09\", \"dairy\", \"dveg\", \"DQQ24\", \"DQQ13\", \n               \"DQQ29\", \"DQQ20\", \"DQQ01\", \"DQQ27\", \"DQQ23\", \"mddw\", \"anml\", \"DQQ25\", \"DQQ21\", \"ofr\", \"DQQ12\", \"oveg\", \"DQQ22\", \n               \"DQQ19\", \"DQQ16\", \"DQQ04\", \"safd\", \"snf\", \"swtbev\", \"DQQ28\", \"swtfd\", \"DQQ26\", \"umeat\", \"DQQ18\", \"DQQ17\",\n               \"DQQ08\", \"DQQ05\", \"DQQ03\", \"DQQ02\", \"DQQ15\", \"zvegfr\")){ \n      # All\n      x <- svyciprop(~I(d[, i] == 1), d_w, na.rm = TRUE, method = \"as\", df=degf(d_w))\n      x_LCI <- attributes(x)$ci[1]\n      x_UCI <- attributes(x)$ci[2]\n      result2 <- rbind(result2, c(\"All\", \n                                  i, \n                                  round(x*100, digits = 2), \n                                  round(x_LCI*100, digits = 2), \n                                  round(x_UCI*100, digits = 2), NA, NA, NA, NA))\n      # Male and Female\n      x <- svyciprop(~I(d_m[, i] == 1), d_m_w, na.rm = TRUE, method = \"as\", df=degf(d_m_w))\n      x_LCI <- attributes(x)$ci[1]\n      x_UCI <- attributes(x)$ci[2]\n      \n      y <- svyciprop(~I(d_f[, i] == 1), d_f_w, na.rm = TRUE, method = \"as\", df=degf(d_f_w))\n      y_LCI <- attributes(y)$ci[1]\n      y_UCI <- attributes(y)$ci[2]\n      \n      varname <- as.name(i)\n      ifelse(x == 0 & y == 0, t <- NA, t <- eval(bquote(svychisq(~.(varname)+gender,d_w))))\n      \n      result2 <- rbind(result2, c(\"Male\", \n                                  i, \n                                  round(x*100, digits = 2), \n                                  round(x_LCI*100, digits = 2), \n                                  round(x_UCI*100, digits = 2),\n                                  round((x-y)*100, digits = 2), \n                                  NA, \n                                  NA, \n                                  ifelse(is.na(t), NA, round(as.numeric(t$p.value), digits = 2))))\n      \n      result2 <- rbind(result2, c(\"Female\", \n                                  i, \n                                  round(y*100, digits = 2), \n                                  round(y_LCI*100, digits = 2), \n                                  round(y_UCI*100, digits = 2), \n                                  round((x-y)*100, digits = 2),\n                                  round((x-y)*100, digits = 2), \n                                  NA, \n                                  NA, \n                                  ifelse(is.na(t), NA, round(as.numeric(t$p.value), digits = 2))))\n      \n      # Rural and Urban\n      x <- svyciprop(~I(d_u[, i] == 1), d_u_w, na.rm = TRUE, method = \"as\", df=degf(d_u_w))\n      x_LCI <- attributes(x)$ci[1]\n      x_UCI <- attributes(x)$ci[2]\n      \n      y <- svyciprop(~I(d_r[, i] == 1), d_r_w, na.rm = TRUE, method = \"as\", df=degf(d_r_w))\n      y_LCI <- attributes(y)$ci[1]\n      y_UCI <- attributes(y)$ci[2]\n      \n      varname <- as.name(i)\n      ifelse(x == 0 & y == 0, t <- NA, t <- eval(bquote(svychisq(~.(varname)+Residence,d_w))))\n      \n      result2 <- rbind(result2, c(\"Urban\", \n                                  i,\n                                  round(x*100, digits = 2), \n                                  round(x_LCI*100, digits = 2), \n                                  round(x_UCI*100, digits = 2),\n                                  round((x-y)*100, digits = 2), \n                                  NA, \n                                  NA, \n                                  ifelse(is.na(t), NA, round(as.numeric(t$p.value), digits = 2))))\n      \n      result2 <- rbind(result2, c(\"Rural\", \n                                  i, \n                                  round(y*100, digits = 2), \n                                  round(y_LCI*100, digits = 2), \n                                  round(y_UCI*100, digits = 2),\n                                  round((x-y)*100, digits = 2), \n                                  NA, \n                                  NA, \n                                  ifelse(is.na(t), NA, round(as.numeric(t$p.value), digits = 2))))\n      \n    }    \n\n\nresultlist1 <- c()\nresultlist2 <- c()\nresult1 <- result1[-1,]\nresultlist1 <- c(resultlist1,result1)\nresult2 <- result2[-1,]\nresultlist2 <- c(resultlist2,result2)\nresultlist1 <- data.frame(resultlist1)      \nresultlist2  <- data.frame(resultlist2)\ncolnames(resultlist1) <- colnames(resultlist2)\nresults <- rbind(resultlist1, resultlist2)\nresults <- results %>%\n  mutate(\n    Unit = case_when(Variable %in% c(\"dds\", \"ncdp\", \"ncdr\", \"gdr\") ~ \"Score\",\n                     .default = \"Percentage\")\n  )\n\n# Long Names format\nlongNames <- c(all5 = \"All-5\", \n               all5a = \"At least one vegetable\",\n               all5b = \"At least one fruit\",\n               all5c = \"At least one pulse, nut, or seed\",\n               all5d = \"At least one animal-source food\",\n               all5e = \"At least one starchy staple food\",\n               dds = \"Dietary diversity score\",\n               ncdp = \"NCD-Protect\",\n               ncdr = \"NCD-Risk\",\n               gdr = \"GDR score\",\n               DQQ11 = \"Baked or grain-based sweets\",\n               DQQ14 = \"Cheese\",\n               DQQ09 = \"Citrus\",\n               dairy = \"Dairy\",\n               dveg = \"Dark green leafy vegetables\",\n               DQQ24 = \"Deep fried foods\",\n               DQQ13 = \"Eggs\",\n               DQQ29 = \"Fast food\", \n               DQQ20 = \"Fish or seafood\",\n               DQQ01 = \"Foods made from grains\",\n               DQQ27 = \"Fruit juice and fruit drinks\",\n               DQQ23 = \"Instant noodles\",\n               mddw = \"MDD-W\",\n               anml = \"Meat, poultry, or fish\",\n               DQQ25  = \"Milk\",\n               DQQ21 = \"Nuts or seeds\",\n               ofr = \"Other fruits\",\n               DQQ12 = \"Other sweets\",\n               oveg = \"Other vegetables\",\n               DQQ22 = \"Packaged ultra-processed salty snacks\",\n               DQQ19 = \"Poultry\",\n               DQQ16 = \"Processed meats\",\n               DQQ04  = \"Pulses\",\n               safd = \"Salty or fried snacks\",\n               snf = \"Salty snacks, instant noodles, or fast food\",\n               swtbev = \"Sweet beverages\",\n               DQQ28 = \"Soft drink consumption\",\n               swtfd = \"Sweet foods\",\n               DQQ26  = \"Sweet tea, coffee, or cocoa\",\n               umeat = \"Unprocessed red meat\",\n               DQQ18 = \"Unprocessed red meat (non-ruminants)\",\n               DQQ17 = \"Unprocessed red meat (ruminants)\",\n               DQQ08 = \"Vitamin A-rich fruits\",\n               DQQ05 = \"Vitamin A-rich orange vegetables\",\n               DQQ03 = \"White roots or tubers\",\n               DQQ02  = \"Whole grains\",\n               DQQ15  = \"Yogurt\",\n               zvegfr= \"Zero vegetable or fruit consumption\"\n)\n\n# DQQ names\ndqqNames <- c(DQQ11 = \"DQQ11\",\n              DQQ14 = \"DQQ14\",\n              DQQ09 = \"DQQ9\",\n              dveg = \"DQQ6\",\n              DQQ24 = \"DQQ24\",\n              DQQ13 = \"DQQ13\",\n              DQQ29 = \"DQQ29\", \n              DQQ20 = \"DQQ20\",\n              DQQ01 = \"DQQ1\",\n              DQQ27 = \"DQQ27\",\n              DQQ23 = \"DQQ23\",\n              DQQ25  = \"DQQ25\",\n              DQQ21 = \"DQQ21\",\n              ofr = \"DQQ10\",\n              DQQ12 = \"DQQ12\",\n              oveg = \"DQQ7\",\n              DQQ22 = \"DQQ22\",\n              DQQ19 = \"DQQ19\",\n              DQQ16 = \"DQQ16\",\n              DQQ04  = \"DQQ4\",\n              DQQ28 = \"DQQ28\",\n              DQQ26  = \"DQQ26\",\n              DQQ18 = \"DQQ18\",\n              DQQ17 = \"DQQ17\",\n              DQQ08 = \"DQQ8\",\n              DQQ05 = \"DQQ5\",\n              DQQ03 = \"DQQ3\",\n              DQQ02  = \"DQQ2\",\n              DQQ15  = \"DQQ15\"\n)\n\n#Cleaning and exporting ----\nresults$Mean_prevalence <- as.numeric(results$Mean_prevalence)\nresults$Lower_95_CI <- as.numeric(results$Lower_95_CI)\nresults$Upper_95_CI <- as.numeric(results$Upper_95_CI)\n\n\nresults <- results %>%\n  mutate(\n    DQQ_question = as.character(dqqNames[results$Variable]),\n    Variable = as.character(longNames[results$Variable]),\n    Mean_prevalence = case_when(Subgroup == \"Male\" & Variable == \"MDD-W\" ~ NA, .default = Mean_prevalence)\n  ) %>%\n  relocate(DQQ_question, .after = Variable) %>%\n  relocate(Unit, .after = DQQ_question) %>%\n  rename(Indicator = Variable)\n```\n````\n:::\n\n\n## Exploratory Analysis\n\nLets try first exploring the distribution of a food group, for instance NCD-Risk, across two factors, education level and job categories. We set font options for output graphs using `showtext` package and **Whitney** font face which has been preferred font for previous DQQ-based graphs.\n\n\n::: {.cell}\n\n````{.cell-code  code-fold=\"true\"}\n```{{r}}\n#| output: false\n#| code-fold: true\n#| warning: false\n\nfont_paths(\"font/whitney-2\")\nfont_add(\"Whitney\", \n          regular = \"whitneybook.otf\", \n          bold = \"whitneybold.otf\",\n          italic = \"whitneybookitalic.otf\", \n          bolditalic = \"whitneysemibold.otf\")\nshowtext_auto()\npar(family = \"Whitney\")\n\n# Check for NAs \nsum(is.na(d$ncdr)) # 0\nsum(is.na(d$edu)) # 2\n```\n````\n:::\n\n\nIn below graphs distributions of **NCD_Risk** and **NCD-Protect** are illustrated using `ggplot2` package. Categorical variables are useful for adding extra information on how data distributed, for instance across *education*, *job*, *region* and *gender*.\n\n\n::: {.cell}\n\n````{.cell-code  code-fold=\"true\"}\n```{{r, fig.width= 12, fig.height= 8, dpi= 96}}\n#| fig-cap: \"Distrubution of NCD-Risk\"\n#| code-fold: true\n#| warning: false\n\nd %>%\n  filter(!is.na(edu)) %>%\n  ggplot(aes(x = ncdr, fill = edu)) +\n  geom_histogram(binwidth = 1) +\n  guides(fill = \"none\") +\n  facet_wrap(~edu) + \n  labs(\n    x = \"NCD-Risk values\",\n    y = \"Counts\",\n    title = \"Histogram of NCDR-Risk across education levels\", \n    subtitle = \"Value of one used for binwidth to make bins side-by-side\",\n    caption = \"\"\n  ) +\n  theme(\n    plot.background = element_rect(fill = \"#e9ecef\"), \n    plot.title = element_text(family = \"Whitney\", face = \"bold\", size = 20, margin = margin(t = 0.05, unit = \"cm\")),\n    plot.subtitle = element_text(family = \"Whitney\", face = \"italic\", size = 16, margin = margin(b = 0.5, t = 0.1, unit = \"cm\")),\n    panel.background = element_rect(fill = \"#f8f9fa\", colour = \"gray\"), \n    panel.grid = element_blank(),\n    panel.grid.minor.y = element_line(colour = \"gray\", linetype = 2),\n    panel.grid.major.y = element_line(colour = \"gray\", linetype = 4),\n    axis.title = element_text(family = \"Whitney\", face = \"bold\", size = 12),\n    axis.text = element_text(family = \"Whitney\", face = \"bold\", size = 10),\n    axis.title.x = element_text(family = \"Whitney\", face = \"bold\", size = 12, margin = margin(t = 0.5, unit = \"cm\")),\n    strip.background = element_rect(fill = \"#e9ecef\"),\n    strip.text = element_text(family = \"Whitney\", face= \"bold\", size = 14),\n    plot.margin = margin(t = 0.5, r = 0.5, b = 0.5, l = 0.5, unit = \"cm\")\n  )\n```\n````\n\n::: {.cell-output-display}\n![Distrubution of NCD-Risk](index_files/figure-html/unnamed-chunk-10-1.png){width=1152}\n:::\n:::\n\n::: {.cell}\n\n````{.cell-code  code-fold=\"true\"}\n```{{r, fig.width= 12, fig.height= 8, dpi= 96}}\n#| fig-cap: \"Distrubution of NCD-Protect\"\n#| code-fold: true\n#| warning: false\n\n# NCD-Protect on gender and regions\nd %>%\n  ggplot(aes(x = ncdp, fill = gender)) +\n  geom_histogram(\n    binwidth = 1, \n    position = \"identity\", \n    alpha = 0.5\n    ) +\n  scale_fill_manual(\n    values = c(\n      \"Male\" = \"#00296b\", \n      \"Female\" = \"#ffd500\"\n      )\n  ) +\n  #guides(fill = \"none\") +\n  facet_wrap(~ reg, nrow = 2, ncol = 3, dir = \"v\") + \n  labs(\n    x = \"NCD-Protect values\",\n    y = \"Counts\",\n    title = \"Histogram of NCD-Protect across region and gender\", \n    subtitle = \"Value of one used for binwidth to make bins side-by-side\",\n    caption = \"\"\n  ) +\n  theme(\n    plot.background = element_rect(fill = \"#e9ecef\"), \n    plot.title = element_text(family = \"Whitney\", face = \"bold\", size = 20, margin = margin(t = 0.05, unit = \"cm\")),\n    plot.subtitle = element_text(family = \"Whitney\", face = \"italic\", size = 16, margin = margin(b = 0.5, t = 0.1, unit = \"cm\")),\n    panel.background = element_rect(fill = \"#f8f9fa\", colour = \"gray\"), \n    panel.grid = element_blank(),\n    panel.grid.minor.y = element_line(colour = \"gray\", linetype = 2),\n    panel.grid.major.y = element_line(colour = \"gray\", linetype = 4),\n    axis.title = element_text(family = \"Whitney\", face = \"bold\", size = 12),\n    axis.text = element_text(family = \"Whitney\", face = \"bold\", size = 10),\n    axis.title.x = element_text(family = \"Whitney\", face = \"bold\", size = 12, margin = margin(t = 0.5, unit = \"cm\")),\n    legend.title = element_blank(),\n    legend.position = c(0.94, 0.92),\n    legend.text = element_text(family = \"Whitney\", face = \"bold\", size = 12),\n    legend.background = element_rect(fill = \"#f8f9fa\"), \n    strip.background = element_rect(fill = \"#e9ecef\"),\n    strip.text = element_text(family = \"Whitney\", face= \"bold\", size = 14),\n    plot.margin = margin(t = 0.5, r = 0.5, b = 0.5, l = 0.5, unit = \"cm\")\n  )\n```\n````\n\n::: {.cell-output-display}\n![Distrubution of NCD-Protect](index_files/figure-html/unnamed-chunk-11-1.png){width=1152}\n:::\n:::\n\n\nWe can use results of complex design objects to explore estimated population information based on weighted stratified data. The principal difficulty in designing graphics for complex survey data is representing the sampling weights. Three strategies could be used to overcome this difficulty: 1. Base the graph on an estimated population distribution. 2. Explicitly indicate weights on the graph. 3. Draw a simple random sample from the estimated population distribution and graph this sample instead. Here We start off by extracting some information on **mean population estimates NCD_Risk** from `svyby` which compute survey statistics on subsets of a survey defined by factor (education and job). `d_w` is used as the `svydesign` object which was defined in previous sections.\n\nWe can use simple `barplot` function directly like the first plot, but it would be more effective to retrieve information and save it as `data.frame` and use `ggplot` functionality for graphing purposes.\n\n\n::: {.cell}\n\n````{.cell-code  code-fold=\"true\"}\n```{{r, fig.width= 12, fig.height= 8, dpi= 96}}\n#| fig-cap: \"Population estimates for male and female\"\n#| code-fold: true\n#| warning: false\n\nbarplot(svymean(~gender, d_w))\n```\n````\n\n::: {.cell-output-display}\n![Population estimates for male and female](index_files/figure-html/unnamed-chunk-12-1.png){width=1152}\n:::\n:::\n\n::: {.cell}\n\n````{.cell-code  code-fold=\"true\"}\n```{{r, fig.width= 12, fig.height= 8, dpi= 96}}\n#| output: false\n#| code-fold: true\n#| warning: false\n\nncdr_job_edu <- svyby(~ncdr, ~edu + job,\n                      svymean,\n                      design = d_w,\n                      keep.names = FALSE\n                      )\n\nncdr_job_edu_df <- data.frame(ncdr_job_edu)\nncdr_job_edu_df$job1 <- cat(str_wrap(ncdr_job_edu_df$job, width = 20))\n```\n````\n:::\n\n::: {.cell}\n\n````{.cell-code  code-fold=\"true\"}\n```{{r, fig.width= 12, fig.height= 8, dpi= 96}}\n#| fig-cap: \"NCD-Risk mean estimates based on stratified survey data\"\n#| code-fold: true\n#| warning: false\n\nncdr_job_edu_df %>%\n  filter(job != \"Don’t know\") %>%\n  ggplot()+\n  geom_point(aes(x= edu, y= ncdr, color= job, size = 0.5),\n          ) + \n  scale_y_continuous(limits = c(0, 4), expand = c(0.1, 0.1)) +\n  guides(\n    color = \"none\",\n    size = \"none\"\n    ) +\n  facet_wrap(~job) +\n  labs(\n    x = \"Level of completed education\",\n    y = \"NCD-Risk\",\n    title = \"NCD-Risk mean estimates across education and job categories\", \n    caption = \"'Don’t know' responses was removed fom job categories\",\n  ) +\n  theme(\n    plot.background = element_rect(fill = \"#e9ecef\"), \n    plot.title = element_text(family = \"Whitney\", face = \"bold\", size = 20, margin = margin(t = 0.05, b = 1, unit = \"cm\")),\n    plot.caption = element_text(family = \"Whitney\", face = \"italic\", size = 12, margin = margin(t = 0.5, unit = \"cm\"), hjust = 0),\n    panel.background = element_rect(fill = \"#f8f9fa\", colour = \"gray\"), \n    panel.grid = element_blank(),\n    panel.grid.minor.y = element_line(colour = \"gray\", linetype = 2),\n    panel.grid.major.y = element_line(colour = \"gray\", linetype = 4),\n    axis.title.y = element_text(family = \"Whitney\", face = \"bold\", size = 12, margin = margin(r = 0.5, unit = \"cm\")),\n    axis.text.x = element_text(family = \"Whitney\", face = \"bold\", size = 10, angle = 45, hjust = 1),\n    axis.title.x = element_text(family = \"Whitney\", face = \"bold\", size = 12, margin = margin(t = 0.5, unit = \"cm\")),\n    strip.background = element_rect(fill = \"#e9ecef\"),\n    strip.text = element_text(family = \"Whitney\", face= \"bold\", size = 14),\n    plot.margin = margin(t = 0.5, r = 0.5, b = 0.5, l = 0.5, unit = \"cm\")\n  )\n```\n````\n\n::: {.cell-output-display}\n![NCD-Risk mean estimates based on stratified survey data](index_files/figure-html/unnamed-chunk-14-1.png){width=1152}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}