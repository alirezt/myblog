{
  "hash": "cdb207c206bfc8380992c2dfa00a6e08",
  "result": {
    "markdown": "---\ntitle: \"Make your quarto interactive with embedded shiny app\"\ndate: 2023-05-08\ndescription: \"Use HTML iframe tag to link shiny and quarto\"\nimage: \"img/cover.jpg\"\ntwitter-card: \n  image: \"img/cover.jpg\"\nopen-graph: \n  image: \"img/cover.jpg\"\ncategories: \n  - r\n  - shiny\n  - quarto\n  - visualization\n  - interactivity\n  - DQQ\n  - GAIN\n---\n\n\n# Short introduction on input data and iframe tag\nI had a project with [GAIN](https://www.gainhealth.org/) which involved data collection, analysis, and visualization. Main inputs were based on *survey data* came from [Gallup World Poll survey](https://www.gallup.com/analytics/318875/global-research.aspx) and their research partner in [Diet Quality Questionnaire](https://www.dietquality.org/) project. \n\n:::{.column-margin}\n\nThe Global Diet Quality Project is a collaboration between Gallup, Harvard Department of Global Health and Population, and the Global Alliance for Improved Nutrition (GAIN).\n\n\nThis project aims to collect dietary quality data in the general adult population across countries worldwide, and to provide the tools for valid and feasible diet quality monitoring within countries. The project enables the collection of consistent, comparable dietary data across countries for the first time. [source](https://www.dietquality.org/about)\n\n:::\n\n\nHere I want to show you how you could use shiny with all its **interactive capabilities** inside a quarto document (like the one you're reading now). The idea is simple, just copy and paste HTML link of your shiny app inside iframe tag which is an inline frame  used to *embed* another document within the current HTML document. You could find more info in this [W3school](https://www.w3schools.com/tags/tag_iframe.ASP). I just picked two tips and will show you how to apply this method:\n\n\n1. Tip: Use **CSS** to style the iframe (see example below). \n2. Tip: It is a good practice to always include a **title attribute** for the iframe. This is used by screen readers to read out what the content of the iframe is.\n\n\n# How to implement \nOk, lets begin: here is my code for shiny app which map diet survey data (analyzed by complex survey design package in R) across the world for 56 countries. You could choose what indicator, or subgroup to choose, but also you can decide on number of discrete colors used for filling the map. \n\n\n::: {.cell}\n\n````{.cell-code  code-fold=\"true\"}\n```{{r}}\n#| eval: false\n#| code-fold: true\n#| warning: false\n\nlibrary(readr)\nlibrary(tidyr)\nlibrary(shiny)\nlibrary(sf)\nlibrary(dplyr)\nlibrary(viridis)\nlibrary(showtext)\nlibrary(ggplot2)\nlibrary(purrr)\nlibrary(rnaturalearth)\nlibrary(maps)\n\n\nfont_paths(\"www\")\nfont_add(\"Whitney\", regular = \"whitneybook.otf\", \n           bold = \"whitneybold.otf\",\n           italic = \"whitneybookitalic.otf\", \n           bolditalic = \"whitneysemibold.otf\")\n\nshowtext_auto()\npar(family = \"Whitney\")\n\ndat <- read_csv(\"data/DQQ_GWP_2021-2022_Internal_17Feb2024.csv\")\nshp <- ne_countries(returnclass = \"sf\", scale = 110)\n\ndat2 <-  dat %>%\n  group_by(Country, Indicator, Subgroup) %>%\n  mutate(Mean_prevalence = mean(Mean_prevalence)) %>%\n  distinct(Country, Indicator, Subgroup, .keep_all = T) %>%\n  right_join(shp[ , c(\"geometry\", \"iso_a3\")], by = join_by(ISO3 == iso_a3)) %>%\n  filter(ISO3 != \"ATA\") %>%\n  st_as_sf()\n\n\nui <- bootstrapPage(\n  tags$style(type = \"text/css\", \"html, body {width:100%;height:100%}\"),\n  plotOutput(\"map\", width = \"100%\", height = \"110%\"),\n  tableOutput(\"table\"),\n  absolutePanel(bottom = 10, left = 10, draggable = TRUE, width = \"250px\", height = \"250px\",\n                selectInput(selected = \"All\", label = \"Select a subgroup: \", inputId = \"subgroup\", choices = unique(dat2$Subgroup)),\n                selectInput(selected = \"Fish or seafood\", label = \"Select an indicator\", inputId = \"var\", choices = unique(dat2$Indicator)),\n                sliderInput(inputId = \"quant\", label = \"Select the number of quantiles\", value = 3, min = 3, max = 5)\n  )\n)\n\nserver <- function(input, output, session){\n  \n  dat3 <- reactive({\n    dat2 %>% \n      select(-c(DQQ_question, Difference, Diff_LCI, Diff_UCI, Diff_p)) %>%\n      drop_na() %>%\n      filter(Subgroup == input$subgroup & Indicator == input$var)\n  })\n  \n  quantiles <- reactive({\n    dat3() %>%\n      pull(var = `Mean_prevalence`) %>%\n      quantile(probs = seq(0, 1, length.out = input$quant +1), na.rm = TRUE) %>% \n      as.vector()\n  })\n  \n  labels <- reactive({\n    imap_chr(quantiles(), function(x, idx){\n      return(paste0(round(quantiles()[idx], 0), \"%\", \" â€“ \", round(quantiles()[idx + 1], 0), \"%\"))\n    })\n  })\n  \n  dat4 <- reactive({\n    mylabels <- labels()[1:length(labels()) - 1]\n    dat3() %>%\n      mutate(mean_quantiles = cut(Mean_prevalence,\n                                  breaks = quantiles(),\n                                  labels = mylabels,\n                                  include.lowest = T))\n  })\n  \n  output$map <- renderPlot({\n    global <- map_data('world')\n    global <- global[global$region != \"Antarctica\", ]\n    dat4() %>%\n      ggplot() +\n      geom_polygon(data = global, aes(x=long, y=lat, group = group), fill='NA', color='black', size=0.2) +\n      geom_sf(aes(fill = `mean_quantiles`), color = \"black\", size = 0.5) +\n      scale_fill_viridis(\n        option = \"A\",\n        alpha = 0.9, \n        begin = 0.1, \n        end = 0.9,\n        discrete = T, \n        direction = -1, \n      ) +\n      guides(fill = guide_legend(direction = \"horizontal\",\n                                 label.hjust = 0.5,\n                                 nrow = 1,\n                                 byrow = T,\n                                 reverse = F,\n                                 label.position = \"bottom\",\n                                 keyheight = unit(4, units = \"mm\"),\n                                 keywidth = unit(30, units = \"mm\"))) +\n      labs(x = NULL,\n           y = NULL,\n           title = paste(\"Global map of\", input$var, sep = \" \"),\n           subtitle = paste(\"Global variation of\", input$var, \"indicator\", \"in\", input$subgroup, \"sub-class\", sep = \" \"),\n           caption = \"Map CC-BY-SA; Code:github.com/alirezt\") +\n      \n      theme_minimal() +\n      theme(\n        text = element_text(family = \"Whitney\", face = \"bold\", color = \"black\"),\n        axis.text.x = element_blank(),\n        axis.text.y = element_blank(),\n        plot.background = element_rect(fill = \"#f5f3f4\", color = NA),\n        panel.background = element_rect(fill = \"#f5f3f4\", color = NA),\n        legend.background = element_rect(fill = \"#f5f3f4\", color = NA),\n        legend.position = \"bottom\",\n        plot.margin = unit(c(.5, .5, .2, .5), \"cm\"),\n        legend.title = element_blank(),\n        legend.text = element_text(size = 12, hjust = 0, face = \"bold\", color = \"#4f504b\", family = \"Whitney\"),\n        plot.title = element_text(size = 20, hjust = 0.5, color = \"#4f504b\", family = \"Whitney\"),\n        plot.subtitle = element_text(size = 12, hjust = 0.5, color = \"#4f504b\", \n                                     margin = margin(b = 0.2, t = -0.1, l = 2, unit = \"cm\"), debug = F),\n        plot.caption = element_text(size = 10, hjust = .5, \n                                    margin = margin(t = 0.2, b = 0, unit = \"cm\"), color = \"#939184\")\n      )\n  }) \n  \n}\n\nshinyApp(ui, server)\n```\n````\n:::\n\n\nNow, you could publish your app in [shinyapps service](https://www.shinyapps.io/) and copy and paste it like I did here which result in a nice interactive frame filled with your shiny application. Also, as you could see there are bunch of CSS style that I [Pandoc div block options](https://quarto.org/docs/authoring/figures.html#figure-panels) as well for designing arrangement and layouting purposes.  \n\n:::{.callout.tip}\n\nNote, as mentioned in [quarto docs](https://quarto.org/docs/authoring/figures.html#figure-divs), you can treat any markdown content you want as a figure by enclosing it in Pandoc div block.\n\n:::\n\n::: {.border .column-screen-inset layout=\"[70,-2,28]\"}\n\n```{=html}\n <iframe id=\"example1\" src=\"https://alireza-taghdisian.shinyapps.io/dqqshiny_2/\" style=\"border: none; width: 100%; height: 720px\" frameborder=\"0\"></iframe>\n```\n\n\n<div>\n<br/>\n\nHere is the exact code you I used in this quarto file to embed the shiny app.\n```html\n<iframe \nid=\"example1\" \nsrc=\"https://alireza-taghdisian.shinyapps.io/dqqshiny_2/\" \nstyle=\"border: none; width: 100%; height: 720px\" \nframeborder=\"0\">\n</iframe>\n```\n<br/>\nAlso, I used below Pandoc div code for content arrangement. \n```r\n::: {.border .column-screen-inset layout=\"[70,-2,28]\"}\n:::\n```\n</div>\n\n:::\n\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}